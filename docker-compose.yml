services:
  # --- PostgreSQL Database for Moodle ---
  moodle_db:
    image: postgres:17.5
    container_name: entrenai_moodle_db
    restart: unless-stopped
    ports:
      - "${MOODLE_DB_HOST_PORT:-5433}:5432" # PostgreSQL port
    volumes:
      - moodle_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${MOODLE_DB_USER:-moodle_user}
      POSTGRES_PASSWORD: ${MOODLE_DB_PASSWORD:-moodle_password}
      POSTGRES_DB: ${MOODLE_DB_NAME:-moodle_db}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD}
    networks:
      - entrenai_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-moodle_user} -d $${POSTGRES_DB:-moodle_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Moodle Application ---
  moodle:
    image: bitnami/moodle:4.5.4
    container_name: entrenai_moodle_app
    restart: unless-stopped
    ports:
      - "${MOODLE_HOST_PORT:-8080}:8080" # Moodle app port
      - "${MOODLE_HOST_SSL_PORT:-8443}:8443" # Moodle SSL port
    volumes:
      - moodle_app_data:/bitnami/moodle
      - moodle_data_dir:/bitnami/moodledata # Moodle data directory
    environment:
      MOODLE_DATABASE_TYPE: pgsql
      MOODLE_DATABASE_HOST: moodle_db
      MOODLE_DATABASE_PORT_NUMBER: 5432
      MOODLE_DATABASE_USER: ${MOODLE_DB_USER:-moodle_user}
      MOODLE_DATABASE_PASSWORD: ${MOODLE_DB_PASSWORD:-moodle_password}
      MOODLE_DATABASE_NAME: ${MOODLE_DB_NAME:-moodle_db}
      MOODLE_USERNAME: ${MOODLE_USERNAME:-admin}
      MOODLE_PASSWORD: ${MOODLE_PASSWORD:-admin_password}
      MOODLE_EMAIL: ${MOODLE_EMAIL:-admin@example.com}
      MOODLE_SITE_NAME: ${MOODLE_SITENAME:-Entrenai Moodle}
      MOODLE_REVERSEPROXY: ${MOODLE_REVERSEPROXY:-no}
      ALLOW_EMPTY_PASSWORD: 'no'
    depends_on:
      moodle_db:
        condition: service_healthy
    networks:
      - entrenai_net

  # --- PGVector Database ---
  pgvector_db:
    image: pgvector/pgvector:0.8.0-pg17 # Includes pgvector extension
    container_name: entrenai_pgvector_db
    restart: unless-stopped
    ports:
      - "${PGVECTOR_HOST_PORT:-5432}:5432" # Expose on a different host port if 5432 is taken
    volumes:
      - pgvector_data:/var/lib/postgresql/data
      - ./src/entrenai/core/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_USER: ${PGVECTOR_USER:-pgvector_user}
      POSTGRES_PASSWORD: ${PGVECTOR_PASSWORD:-pgvector_password}
      POSTGRES_DB: ${PGVECTOR_DB_NAME:-pgvector_db}
      # Optional: Command to create extension if not automatically handled by the image
    networks:
      - entrenai_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-pgvector_user} -d $${POSTGRES_DB:-pgvector_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Ollama LLM Server ---
  ollama:
    image: ollama/ollama:0.6.8
    container_name: entrenai_ollama
    restart: unless-stopped
    ports:
      - "${OLLAMA_HOST_PORT:-11434}:11434"
    volumes:
      - ollama_models:/root/.ollama # Persist models
    environment:
      OLLAMA_CONTEXT_LENGTH: 25000
    # To enable GPU support (example for NVIDIA, ensure drivers are installed on host):
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1 # or 'all'
    #           capabilities: [gpu]
    networks:
      - entrenai_net

  # --- PostgreSQL Database for N8N ---
  n8n_db:
    image: postgres:17.5
    container_name: entrenai_n8n_db
    restart: unless-stopped
    volumes:
      - n8n_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${N8N_DB_USER:-n8n_user}
      POSTGRES_PASSWORD: ${N8N_DB_PASSWORD:-n8n_password}
      POSTGRES_DB: ${N8N_DB_NAME:-n8n_db}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD}
    networks:
      - entrenai_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-n8n_user} -d $${POSTGRES_DB:-n8n_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- N8N Workflow Automation ---
  n8n:
    image: n8nio/n8n:1.91.3
    container_name: entrenai_n8n_app
    restart: unless-stopped
    ports:
      - "${N8N_HOST_PORT:-5678}:5678"
    volumes:
      - n8n_app_data:/home/node/.n8n
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: n8n_db
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${N8N_DB_NAME:-n8n_db}
      DB_POSTGRESDB_USER: ${N8N_DB_USER:-n8n_user}
      DB_POSTGRESDB_PASSWORD: ${N8N_DB_PASSWORD:-n8n_password}
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY:-a_very_secure_random_string_for_n8n} # CHANGE THIS IN .env!
      N8N_EMAIL_MODE: smtp # Placeholder, can be configured later if email sending is needed
      N8N_HOST: ${N8N_HOST_DOMAIN:-localhost} # Set to your domain if N8N is publicly accessible
      WEBHOOK_URL: ${N8N_WEBHOOK_URL:-http://localhost:5678} # URL N8N uses for its webhooks
      # GENERIC_TIMEZONE: America/Argentina/Buenos_Aires # Set your timezone
    depends_on:
      n8n_db:
        condition: service_healthy
    networks:
      - entrenai_net

  fahapi_backend:
    build:
      context: .
      dockerfile: Dockerfile.fahapi
    container_name: entrenai_fahapi_backend
    restart: unless-stopped
    ports:
      - "${FAHAPI_HOST_PORT:-8000}:8000"
    volumes:
      - ./src:/app/src # For development hot-reloading; remove for production if code is solely from image
      - entrenai_data:/app/data # For downloads, markdown files, etc.
    env_file:
      - .env
    environment:
      APP_ENV: docker # To ensure docker-specific configurations are loaded
      DATA_DIR: /app/data # Standardized data directory within the container
      # Add any other necessary backend-specific environment variables from .env if not covered by env_file
      # For example, ensure FastAPI host/port are set if uvicorn command in Dockerfile.fahapi doesn't use defaults
      # Or if they are read from base_config which is loaded via .env
    depends_on:
      redis:
        condition: service_healthy
      pgvector_db:
        condition: service_healthy
      moodle_db: # If the API interacts with Moodle services that depend on Moodle DB directly
        condition: service_healthy
      ollama: # If Ollama is directly used by the backend
        condition: service_healthy
        # Add other necessary dependencies
    networks:
      - entrenai_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"] # Basic health check for FastAPI
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s # Give it some time to start up

  # --- Redis for Celery ---
  redis:
    image: "redis:alpine"
    container_name: entrenai_redis
    restart: unless-stopped
    ports:
      - "${REDIS_HOST_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - entrenai_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: entrenai_celery_worker # Can remain the same
    restart: unless-stopped
    command: sh -c "celery -A src.entrenai.celery_app.app worker -l INFO -P eventlet"
    # No src volume mount needed as Dockerfile.celery copies necessary files
    # No data volume mount needed as it doesn't process files directly
    env_file:
      - .env
    environment:
      APP_ENV: docker # May not be strictly needed by celery worker but often inherited
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      FAHAPI_BACKEND_URL: http://fahapi_backend:8000 # URL for the backend API
      # PYTHONUNBUFFERED: 1 # Good for seeing logs immediately
    depends_on:
      redis:
        condition: service_healthy
      fahapi_backend: # Depends on the new backend service
        condition: service_healthy
    networks:
      - entrenai_net

volumes:
  moodle_db_data:
    driver: local
  moodle_app_data:
    driver: local
  moodle_data_dir:
    driver: local
  pgvector_data: 
    driver: local
  ollama_models:
    driver: local
  n8n_db_data:
    driver: local
  n8n_app_data:
    driver: local
  redis_data: # Added for Redis
    driver: local
  entrenai_data: # Added for Celery worker data
    driver: local

networks:
  entrenai_net:
    driver: bridge

# --- API Service (Example - assuming you have one) ---
# Ensure your API service (if it uses Celery) has these settings:
#   depends_on:
#     - redis # Add other dependencies like databases as needed
#   environment:
#     CELERY_BROKER_URL: redis://redis:6379/0
#     CELERY_RESULT_BACKEND: redis://redis:6379/0
#     # ... other environment variables
#   networks:
#     - entrenai_net
